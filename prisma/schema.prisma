generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  firstName   String?
  email       String        @unique
  password    String?
  role        Role          @default(USER)
  form        Form? // Remove optional flag since every user should have a form
  auditLogs   AuditLog[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  DeletedForm DeletedForm[]
  token       tokens[]

  @@index([email, role])
}

model Form {
  id                  String        @id @default(uuid())
  userId              String        @unique
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  status              FormStatus    @default(IN_PROGRESS)
  submissionDate      DateTime?
  personalDetails     Json?
  locationDetails     Json?
  professionalDetails Json?
  spiritualDetails    Json?
  emergencyContact    Json?
  additionalInfo      Json?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  FormHistory         FormHistory[]

  @@index([userId])
  @@index([createdAt])
  @@index([updatedAt])
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action     String // General description of the action (e.g., "Created User", "Deleted Form").
  entityType String // Type of entity affected, e.g., "User", "Form".
  entityId   String? // ID of the affected entity for better traceability (nullable for system-wide actions).
  details    Json? // Optional field for more context or before/after snapshots.
  timestamp  DateTime @default(now())

  @@index([userId])
  @@index([timestamp])
  @@index([entityType, entityId])
}

model DeletedForm {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deletedAt DateTime @default(now())
  recoverBy DateTime

  @@index([userId, deletedAt])
}

model FormHistory {
  id        String   @id @default(uuid())
  formId    String
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  updatedBy String // ID of the user/admin who made the changes.
  changes   Json // JSON object detailing the changes made to the form (e.g., {"field": "oldValue", "newValue"}).
  updatedAt DateTime @default(now())

  @@index([formId, updatedAt])
}

enum Gender {
  MALE
  FEMALE
  PREFER_NOT_TO_SAY
}

enum FormStatus {
  IN_PROGRESS
  SUBMITTED
  APPROVED
}

enum Role {
  SUPER_ADMIN
  ADMIN
  EDITOR
  VIEWER
  USER
}

model tokens {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token       String   @unique
  type        String
  blacklisted Boolean  @default(false)
  expiresAt   DateTime

  @@index([userId])
  @@index([expiresAt])
}
